{% extends "base.html.twig" %}

{% block title %}Repor{% endblock %}

{% block body %}
    <h1>Report</h1>
    <h2 id="kmom01">kmom 01</h2>
<p>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</p>
<br>
<p> Minna förkunskaper om objektorienterad programmering är Java jag har programmerat med MVC innan har bland annat gjort ett sudokuspel. Jag har även gjort ett spel med hjälp av C och MVC samt bibloteket SDL. </p>
<p>Jag kommer ej ihåg allt men det som jag kommer ihåg är att kontrollern hantera datan mellan model och vyn. </p>
<br>
<p>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</p>
<br>
<p> En klass är en mall för ett objekt och med hjälp av klasser kan man skapa en eller flera objekt. </p>
<p> De man ska tänka på när man skapar klassen är vad för egenskaper du vill att objektet ska ha när det skapas och de egenskaper defineras bland annat med hjälp av en konstruktor </p>
<p> En annan sak man ska tänka på när man skapar en klass är att klassen endast utför en uppgift </p>
<p> Det är även viktigt att tänka på om klassens datamedlemmar ska vara publika eller privata. Generellt brukar datamedlemmar vara privata för att dölja implementeringen av koden vilket ökar säkerheten</p>
<br>
<p>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</p>
<br>
<p>Jag uppfattar kodbasen som ganska tydlig där controller moduler eller modulen ska vara i src mappen och vyn hanteras i templatemappen.</p>
<p>Det var även väldigt enkelt och bra att skicka data till templates och att definera routes till specifika sidor på hemsidan</p>
<p>Jag undrade lite vad filen <code>Kernel.php</code> gör eftersom jag känner igen begreppet från operativsystem och undrade ifall det är inspirerat av Kernels uppgift i ett operativsystem</p>
<p>De har några likheter istället för att hantera I/O och data som i ett OS, ansvarar <code>Kernel.php</code> att användaren hamnar på rätt route genom att söka i <code>src/Controller/</code> </p>
<br>
<p>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</p>
<br>
<p>En sak som jag tyckte var intressant var möjligheten att spara objekt i cache tillexempel med hjälp av APCu.
Det blir verkar vara ett kostandseffektivt sätt om man arbetar med en stor databas. Att spara objet i cachen ökar även hastigheten vid användning av databas.</p>
<p>MVC påminer mycket om hur jag gjorde i Java man har en modul som hantera setters och getters funktioner. Controller anropar sedan dessa funktioner för att ändra eller hämta data.
Det känns bekant.</p>
<br>
<p>Vilken är din TIL för detta kmom? </p>
<br>
<p>Jag har lärt mig hur man skapar routes i PHP. Samt sätta upp grunderna för att göra ett projekt med hjälp av PHP och Symfony. </p>

<br>
<h2 id="kmom02">kmom 02</h2>

<p> <strong>Arv</strong> defineras med hjälp av en basklass som innehåller gemensamma egenskaper för relaterade klasser inom ett specfikt område. </p>
<p> Det resulterar i att underklasserna ej behöver definera dessa egenskaper eller funktioner vilket bland annat minskar kodupprepning samt att koden blir mer strukturerad.</p>

<p> <strong> Komposition </strong> innebär att ett objekts livslängd är beronde av ett annat objekt. Exempelvis kort och hand kan vara en komposition men även en aggregation, det är kodens implementation som bestämmer
vilken relation klasserna har. </p>

<p> <strong> Interface </strong> i <code> PHP </code> fungerar liknande som i <code> Java </code> och påminer om arv. Om en klass implementerar ett interface måste klassen använda sig av funktionerna samt definera dom.

<p> <strong> Trait </strong> kan liknas vid interface fast funktionerna är definerade i trait vilket innebär att en klass kan implementera färdiga funktioner.</p>

<br>
<p> För att lösa uppgiften utgick jag en del från övningen som man fick göra för att sätta upp strukturen enligt MVC. </p>
<p> För att sedan använda mig av <code> Dump and Die </code> för att se vilken data sessionerna eller <code> arrayerna </code> hade. </p>
<p> Själva konceptet och strukturen gällande MVC är detsamma som i andra språk jag har arbetat med.</p>
<p> Därför känner jag mig bekväm i att fördela uppgifterna mellan kontrollern och logiken samt vyn. </p>
<p> Det som hade kunnat vara bättre är bland annat att använda sig av funktionen <code>shuffle</code> istället för att skriva göra en egen loop </p>
<br>
<p> Det finns säkert andra saker som även hade kunnat förbättrats, man hade kunnat ha en klass som hanterar all logik genom getters och setters funktioner för att göra koden lätt att underhålla</p>
<p> För tillfället är det inte så stor skillnad från andra objektorienterade språk </p>
<p> Det finns några skillnader som jag har hittat men det gäller referenser och att datatyper i PHP inte är immutable ifall man inte definierar immutable </p>
<p> Att arbeta med symfony underlättar speciellt när det kommer till routes och sessioner, principen för MVC är samma som i andra språk skillnaden är enbart att sessioner hanterar data. </p>
<p> Ifall man tänker att en session är en stor array med diverse data underlättar det arbete. </p>
<br>
<p> Det jag har lärt mig är bland annat att refrenser exiterar men ej minnesadresser. </p>
<p> Jag har även lärt mig hur man hanterar session i symfony med hjälp av <code> POST </code> och <code> GET </code> samt hur man skriver och läser data till och från ett session. </p>
<p> jag har dessutom förstått vad som ska skickas mellan vyn och kontrollern </p>





{% endblock %}